#!/usr/bin/env bash

# Change these settings if necessary.
# See also:
#   $ ffmpeg -codecs      - show all available codecs
#   $ ffmpeg -formats     - show all available formats
VIDEOCODEC="libx264"
AUDIOCODEC="aac"
OUTPUT="$HOME/Videos/Records/$(date +%d-%m-%y_%H-%M-%S).mp4"

# Screen parameters (fullscreen mode).
# Change if necessary.
W=$(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f1)
H=$(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f2)
X=0
Y=0

# Temporary file used to store state of the script.
TEMPFILE="/tmp/record_data"

# Select audio device using rofi
prompt_device() {
    DEVICE=$(pactl list short sources \
        | awk '{print $1 " "  $2 " " $7} END{print "default"}' \
        | rofi -dmenu -p "Select audio device:" \
        | awk '{print $1}')
}

# Select recording area using rofi.
# Note that slop is required for screen region selection
prompt_area() {
    MODE_FULLSCREEN="Fullscreen"
    MODE_REGION="Region"
    MODE=$(echo -e "$MODE_FULLSCREEN\n$MODE_REGION" | rofi -dmenu -p "Screen Area:")

    if [ "$MODE" == "$MODE_REGION" ]; then
		read -r X Y W H <<< $(slop -f "%x %y %w %h")
    fi

    # Ensure that width and height are even (required by libx264).
    W="$(expr $W '-' $W '%' '2')"
    H="$(expr $H '-' $H '%' '2')"
}

start_record() {
    # Cancel recording if no video codec ($VIDEOCODEC) is specified
    if [ -z $VIDEOCODEC ]; then
        notify-send "Recording" "Canceled (no video codec is specified)"
        exit 1
    fi
    
    # Cancel recording if no audio codec ($AUDIOCODEC) is specified
    if [ -z $AUDIOCODEC ]; then
        notify-send "Recording" "Canceled (no audio codec is specified)"
        exit 1
    fi

    prompt_device

    # Cancel recording if device is not selected
    # e.g. if esc is pressed
    if [ -z $DEVICE ]; then
        notify-send "Recording" "Canceled (no device is selected)"
        exit 1
    fi
    
    prompt_area

    # Save state of the script in a temporary file
    echo "$DEVICE $VIDEOCODEC $AUDIOCODEC $W $H $X $Y $OUTPUT" > "$TEMPFILE"

    notify-send "Recording" "Started at $(date +%H:%M:%S) (File: $OUTPUT)"

    ffmpeg \
        -f x11grab \
        -s "$W"x"$H" \
        -i :0.0+$X,$Y \
        -f pulse \
        -i "$DEVICE" \
        -c:v "$VIDEOCODEC" \
        -c:a "$AUDIOCODEC" \
        -profile:v baseline \
        -level 3.0 \
        -pix_fmt yuv420p \
        "$OUTPUT"

    notify-send "Recording" "Stopped at $(date +%H:%M:%S) (File: $OUTPUT)"
}

stop_record() {
    rm "$TEMPFILE"
    killall ffmpeg
}

if [ -f "$TEMPFILE" ]; then
	stop_record
else
	start_record
fi
